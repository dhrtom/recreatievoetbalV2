<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Recreatievoetbal V2</title>

    <link rel="stylesheet" href="~/dist/vendor.css" asp-append-version="true" />

    <script src="~/dist/vendor.bundle.js" asp-append-version="true"> </script>
    <script src="~/dist/app.bundle.js" asp-append-version="true"> </script>
    <link rel="manifest" href="~/manifest.json">
</head>
<body>
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a asp-area="" asp-controller="Home" asp-action="Index" class="navbar-brand">Recreatievoetbal V2</a>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
                    <li><a asp-area="" asp-controller="Team" asp-action="Index">Teams</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <br />

    <div class="container body-content">
        @RenderBody()
        <hr />
    </div>

    <script>
        

navigator.serviceWorker.addEventListener('message', function (event) {
    reply = processMessage(event.data);
    event.ports[0].postMessage(reply);
});

// Send message to service worker
function send_message_to_sw(msg) {
    navigator.serviceWorker.controller.postMessage(msg);
}

// Show online/offline status
 window.addEventListener('online',  updateOnlineStatus);
 window.addEventListener('offline', updateOnlineStatus);

 function updateOnlineStatus(event) {
    var condition = navigator.onLine ? "Live" : "Currently offline";
        notify(condition);
  }

// Notification
function notify(msg) {
            if (!("Notification" in window)) {
                alert("This browser does not support desktop notification");
            }else if (Notification.permission === "granted") {
                // If it's okay let's create a notification
                var notification = new Notification(msg);
            } else if (Notification.permission !== "denied") {
                Notification.requestPermission(function (permission) {
                    // If the user accepts, let's create a notification
                    if (permission === "granted") {
                        var notification = new Notification(msg);
                    }
                });
            }
        }

function processMessage(msgObj) {
    try {
        if (msgObj.type == 1) {
            notify(msgObj.message);
            return "received";
        }
        console.log(msgObj);
    } catch (err) {
        console.log(err);
    }
}

</script>


</body>
</html>
